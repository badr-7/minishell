<line> ::= <pipeline> $
<pipeline> ::= <cmd> (<pipe> | E)
<pipe> ::= "|" <pipeline>
<cmd> ::= <cmd_elem>+
<cmd_elem> ::= <string> | <redirection> | <var> | <wc>
<redirection> ::= ("<" | ">" | "<<" | ">>") <string>

$ => end of file
E => nothing
+ => at least one occurence
recursive-descent-parser


  export LDFLAGS="-L/goinfre/mel-hous/.brew/opt/readline/lib"
  export CPPFLAGS="-I/goinfre/mel-hous/.brew/opt/readline/include"
 






 typedef enum s_quote_mode
3	{
4	    UNQUOTED,
5	    SINGLE_QUOTED,
6	    DOUBLE_QUOTED,
7	}    t_quote_mode;
8	
9	# define ENCODED_DOUBLEQ    -1
10	# define ENCODED_SINGLEQ    -2
11	
12	void    *ft_memmove(void *dst, const void *src, int n)
13	{
14	    char        *_dst;
15	    const char    *_src;
16	
17	    _dst = dst;
18	    _src = src;
19	    if (src < dst)
20	    {
21	        while (n--)
22	            _dst[n] = _src[n];
23	    }
24	    else if (src > dst)
25	    {
26	        while (n--)
27	            *(_dst++) = *(_src++);
28	    }
29	    return (dst);
30	}
31	
32	
33	t_quote_mode    switch_quote_mode(t_quote_mode mode, char next_char)
34	{
35	    if (next_char == '\'')
36	    {
37	        if (mode == SINGLE_QUOTED)
38	            return (UNQUOTED);
39	        if (mode == UNQUOTED)
40	            return (SINGLE_QUOTED);
41	    }
42	    else if (next_char == '"')
43	    {
44	        if (mode == DOUBLE_QUOTED)
45	            return (UNQUOTED);
46	        if (mode == UNQUOTED)
47	            return (DOUBLE_QUOTED);
48	    }
49	    return (mode);
50	}
51	
52	
53	char    *encode_quotes(char *_s)
54	{
55	    char            *s;
56	    t_quote_mode    mode;
57	
58	    s = _s;
59	    mode = UNQUOTED;
60	    while (*s)
61	    {
62	        mode = switch_quote_mode(mode, *s);
63	        if (*s == '"' && (mode == DOUBLE_QUOTED || mode == UNQUOTED))
64	            *s = ENCODED_DOUBLEQ;
65	        else if (*s == '\'' && (mode == SINGLE_QUOTED || mode == UNQUOTED))
66	            *s = ENCODED_SINGLEQ;
67	        s++;
68	    }
69	    return (_s);
70	}
71	char    *remove_quotes_enc(char *start)
72	{
73	    char    *s;
74	    int    n;
75	
76	    s = start;
77	    n = strlen(s) + 1;
78	    while (*s)
79	    {
80	        if (*s == ENCODED_SINGLEQ || *s == ENCODED_DOUBLEQ)
81	            ft_memmove(s, s + 1, n - 1);
82	        else
83	            s++;
84	        n--;
85	    }
86	    return (start);
87	}
88	
89	int main() {
90	  remove_quotes_enc(encode_quotes(strdup("hello'sssss'ssss\"kdkd\"")));
91	  return 0;
92	}