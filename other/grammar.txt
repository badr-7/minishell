<line> ::= <pipeline> $
<pipeline> ::= <cmd> (<pipe> | E)
<pipe> ::= "|" <pipeline>
<cmd> ::= <cmd_elem>+
<cmd_elem> ::= <word> | <redirection> | <var> | <wc>
<redirection> ::= ("<" | ">" | "<<" | ">>") <word>

$ => end of file
E => nothing
+ => at least one occurence
recursive-descent-parser


  export LDFLAGS="-L/goinfre/mel-hous/.brew/opt/readline/lib"
  export CPPFLAGS="-I/goinfre/mel-hous/.brew/opt/readline/include"
 






	typedef enum s_quote_mode
	{
		UNQUOTED,
		SINGLE_QUOTED,
		DOUBLE_QUOTED,
	}    t_quote_mode;

	# define ENCODED_DOUBLEQ    -1
		# define ENCODED_SINGLEQ    -2
		
		void    *ft_memmove(void *dst, const void *src, int n)
		{
			char        *_dst;
			const char    *_src;
		
			_dst = dst;
			_src = src;
			if (src < dst)
			{
				while (n--)
					_dst[n] = _src[n];
			}
			else if (src > dst)
			{
				while (n--)
					*(_dst++) = *(_src++);
			}
			return (dst);
		}
		
		
		t_quote_mode    switch_quote_mode(t_quote_mode mode, char next_char)
		{
			if (next_char == '\'')
			{
				if (mode == SINGLE_QUOTED)
					return (UNQUOTED);
				if (mode == UNQUOTED)
					return (SINGLE_QUOTED);
			}
			else if (next_char == '"')
			{
				if (mode == DOUBLE_QUOTED)
					return (UNQUOTED);
				if (mode == UNQUOTED)
					return (DOUBLE_QUOTED);
			}
			return (mode);
		}
		
		
		char    *encode_quotes(char *_s)
		{
			char            *s;
			t_quote_mode    mode;
		
			s = _s;
			mode = UNQUOTED;
			while (*s)
			{
				mode = switch_quote_mode(mode, *s);
				if (*s == '"' && (mode == DOUBLE_QUOTED || mode == UNQUOTED))
					*s = ENCODED_DOUBLEQ;
				else if (*s == '\'' && (mode == SINGLE_QUOTED || mode == UNQUOTED))
					*s = ENCODED_SINGLEQ;
				s++;
			}
			return (_s);
		}
		char    *remove_quotes_enc(char *start)
		{
			char    *s;
			int    n;
		
			s = start;
			n = strlen(s) + 1;
			while (*s)
			{
				if (*s == ENCODED_SINGLEQ || *s == ENCODED_DOUBLEQ)
					ft_memmove(s, s + 1, n - 1);
				else
					s++;
				n--;
			}
			return (start);
		}
		
		int main() {
		remove_quotes_enc(encode_quotes(strdup("hello'sssss'ssss\"kdkd\"")));
		return 0;
		}